/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {
    var Neo4j, neo4j, __bind = function(fn, me) {
        return function() { return fn.apply(me, arguments); }; };

    neo4j = require("neo4j");

    exports.initialize = function(schema, callback) {
        var getDBURL, s, url;
        if (!neo4j) {
            return; } ;

        getDBURL = function(schemaSettings) {
            return {
                url: ((((((((((schemaSettings.protocol + "://") + schemaSettings.username) + ":") + schemaSettings.password) + "@") + schemaSettings.host) + ":") + schemaSettings.port) + "/") + schemaSettings.name),
                port: schemaSettings.port }; };


        s = schema.settings;
        if (schema.settings.url) {
            url = require("url").parse(schema.settings.url);
            s.host = url.hostname;
            s.port = url.port;
            s.database = url.pathname.replace(/^\//, "");
            s.username = (url.auth && url.auth.split(":")[0]);
            s.password = (url.auth && url.auth.split(":")[1]); } ;

        s.protocol = (s.protocol || "http");
        s.username = (s.username || "");
        s.password = (s.password || "");
        s.port = (s.port || 7474);
        s.host = (s.host || "localhost");
        s.url = (s.url || getDBURL(s));
        schema.client = new neo4j.GraphDatabase(s.url);
        schema.adapter = new Neo4j(schema.client);
        schema.adapter.schema = schema;
        return process.nextTick(callback); };







    Neo4j = (function() {
        var applyFilter, cleanup, merge, _this = this;


        function Neo4j(client) {
            this.client = client;
            this.updateAttributes = __bind(this.updateAttributes, this);

            this.count = __bind(this.count, this);

            this.destroyAll = __bind(this.destroyAll, this);

            this.allNodes = __bind(this.allNodes, this);

            this.all = __bind(this.all, this);

            this.destroy = __bind(this.destroy, this);

            this.readFromDb = __bind(this.readFromDb, this);

            this.find = __bind(this.find, this);

            this.exists = __bind(this.exists, this);

            this.save = __bind(this.save, this);

            this.updateIndexes = __bind(this.updateIndexes, this);

            this.create = __bind(this.create, this);

            this.node = __bind(this.node, this);

            this._models = { };
            this.cache = { }; };


        Neo4j.prototype.define = function(descr) {
            this.mixClassMethods(descr.model, descr.properties);
            this.mixInstanceMethods(descr.model.prototype, descr.properties);
            return this._models[descr.model.modelName] = descr; };


        Neo4j.prototype.createIndexHelper = function(cls, indexName) {
            var db, method;
            db = this.client;
            method = (("findBy" + indexName[0].toUpperCase()) + indexName.substr(1));
            return cls[method] = function __1(value, _) { var node; var __frame = { name: "__1", line: 90 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {

                return db.getIndexedNode(cls.modelName, indexName, value, __cb(_, __frame, 2, 15, function ___(__0, __1) { node = __1;
                    if ((node && node.data)) {
                        node.data.id = node.id;
                        return _(null, new cls(node.data)); } ; _(); }, true)); }); }; };




        Neo4j.prototype.mixClassMethods = function(cls, properties) {
            var neo;
            neo = this;
            Object.keys(properties).forEach(function(name) {
                if (properties[name].index) {
                    return neo.createIndexHelper(cls, name); } ; });


            cls.setupCypherQuery = function(name, queryStr, rowHandler) {
                return cls[name] = function __1(_, params) { var i, q; var __frame = { name: "__1", line: 109 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {

                    if ((params == null)) {
                        params = []; } ;

                    if ((params.constructor.name !== "Array")) {
                        params = [params]; } ;

                    i = 0;
                    q = queryStr.replace(/\?/g, function() {
                        return params[i++]; });

                    return neo.client.query(__cb(_, __frame, 12, 17, function ___(__0, __2) { var __1 = __2.map_(rowHandler); return _(null, __1); }, true), q); }); }; };










            cls.relationshipExists = function cls_relationshipExists__1(from, to, type, direction, _) { var node; var __frame = { name: "cls_relationshipExists__1", line: 132 }; return __func(_, this, arguments, cls_relationshipExists__1, 4, __frame, function __$cls_relationshipExists__1() {

                return neo.node(from, __cb(_, __frame, 2, 15, function ___(__0, __1) { node = __1;
                    return node._getRelationships(direction, type, __cb(_, __frame, 3, 15, function ___(__0, __3) { var __2 = __3.forEach_(function(r) {
                        if (((r.start.id === from) && (r.end.id === to))) {
                            return true; } ; }); return _(null, __2); }, true)); }, true)); }); };



            cls.createRelationshipTo = function cls_createRelationshipTo__2(id1, id2, type, data, _) { var fromNode, toNode; var __frame = { name: "cls_createRelationshipTo__2", line: 141 }; return __func(_, this, arguments, cls_createRelationshipTo__2, 4, __frame, function __$cls_createRelationshipTo__2() {

                return neo.node(id1, __cb(_, __frame, 2, 19, function ___(__0, __1) { fromNode = __1;
                    return neo.node(id2, __cb(_, __frame, 3, 17, function ___(__0, __2) { toNode = __2;
                        return fromNode(__cb(_, __frame, 4, 15, function ___(__0, __4) { return toNode(__cb(_, __frame, 4, 48, function ___(__0, __5) { return __4.createRelationshipTo(__5, type, cleanup(data), __cb(_, __frame, 4, 15, _, true)); }, true)); }, true)); }, true)); }, true)); }); };

            cls.createRelationshipFrom = function cls_createRelationshipFrom__3(id1, id2, type, data, _) { var __frame = { name: "cls_createRelationshipFrom__3", line: 147 }; return __func(_, this, arguments, cls_createRelationshipFrom__3, 4, __frame, function __$cls_createRelationshipFrom__3() {
                return cls.createRelationshipTo(id2, id1, type, data, __cb(_, __frame, 1, 15, _, true)); }); };

            cls.ensureRelationshipTo = function cls_ensureRelationshipTo__4(id1, id2, type, data, _) { var exists; var __frame = { name: "cls_ensureRelationshipTo__4", line: 150 }; return __func(_, this, arguments, cls_ensureRelationshipTo__4, 4, __frame, function __$cls_ensureRelationshipTo__4() {

                return cls.relationshipExists(id1, id2, type, "outgoing", __cb(_, __frame, 2, 17, function ___(__0, __1) { exists = __1; return (function __$cls_ensureRelationshipTo__4(__then) {
                    if (!exists) {
                        return cls.createRelationshipTo(id1, id2, type, data, __cb(_, __frame, 4, 17, _, true)); } else { __then(); } ; })(_); }, true)); }); };


            return cls.getRelationshipByType = function cls_getRelationshipByType__5(from, type, _) { var node; var __frame = { name: "cls_getRelationshipByType__5", line: 157 }; return __func(_, this, arguments, cls_getRelationshipByType__5, 2, __frame, function __$cls_getRelationshipByType__5() {

                return neo.node(from, __cb(_, __frame, 2, 15, function ___(__0, __1) { node = __1;
                    return node.getRelationships(type, __cb(_, __frame, 3, 15, _, true)); }, true)); }); }; };



        Neo4j.prototype.mixInstanceMethods = function(proto) {
            var neo;
            neo = this;






            return proto.isInRelationWith = function proto_isInRelationWith__1(obj, type, direction, _) { var __this = this; var __frame = { name: "proto_isInRelationWith__1", line: 173 }; return __func(_, this, arguments, proto_isInRelationWith__1, 3, __frame, function __$proto_isInRelationWith__1() {
                return __this.constructor.relationshipExists(__this.id, (obj.id || obj), type, "all", __cb(_, __frame, 1, 15, _, true)); }); }; };



        Neo4j.prototype.node = function Neo4j_prototype_node__1(id, _) { var node, __this = this; var __frame = { name: "Neo4j_prototype_node__1", line: 178 }; return __func(_, this, arguments, Neo4j_prototype_node__1, 1, __frame, function __$Neo4j_prototype_node__1() {

            if (__this.cache[id]) {
                return _(null, __this.cache[id]); } ;

            return __this.client.getNodeById(id, __cb(_, __frame, 5, 13, function ___(__0, __1) { node = __1;
                if (node) {
                    __this.cache[id] = node; } ;

                return _(null, node); }, true)); }); };


        Neo4j.prototype.create = function Neo4j_prototype_create__2(model, data, _) { var node, __this = this; var __frame = { name: "Neo4j_prototype_create__2", line: 190 }; return __func(_, this, arguments, Neo4j_prototype_create__2, 2, __frame, function __$Neo4j_prototype_create__2() {

            data.nodeType = model;
            node = __this.client.createNode();
            node.data = cleanup(data);
            node.data.nodeType = model;
            return node.save(__cb(_, __frame, 6, 6, function __$Neo4j_prototype_create__2() {
                __this.cache[node.id] = node;
                return node.index(model, "id", node.id, __cb(_, __frame, 8, 6, function __$Neo4j_prototype_create__2() {
                    return __this.updateIndexes(model, node, __cb(_, __frame, 9, 6, function __$Neo4j_prototype_create__2() {
                        return _(null, node.id); }, true)); }, true)); }, true)); }); };


        Neo4j.prototype.updateIndexes = function Neo4j_prototype_updateIndexes__3(model, node, _) { var props, __this = this; var __frame = { name: "Neo4j_prototype_updateIndexes__3", line: 203 }; return __func(_, this, arguments, Neo4j_prototype_updateIndexes__3, 2, __frame, function __$Neo4j_prototype_updateIndexes__3() {

            props = __this._models[model].properties;
            return Object.keys(props).forEach_(__cb(_, __frame, 3, 13, _, true), function __1(_, key) { var __frame = { name: "__1", line: 206 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function __$__1(__then) {
                if ((props[key].index && node.data[key])) {
                    return node.index(model, key, node.data[key], __cb(_, __frame, 2, 17, _, true)); } else { __then(); } ; })(_); }); }); }); };




        Neo4j.prototype.save = function Neo4j_prototype_save__4(model, data, _) { var node, __this = this; var __frame = { name: "Neo4j_prototype_save__4", line: 213 }; return __func(_, this, arguments, Neo4j_prototype_save__4, 2, __frame, function __$Neo4j_prototype_save__4() {

            return __this.node(data.id, __cb(_, __frame, 2, 13, function ___(__0, __1) { node = __1;
                delete data.id;
                node.data = cleanup(data);
                return node.save(__cb(_, __frame, 5, 6, function __$Neo4j_prototype_save__4() {
                    return __this.updateIndexes(model, node, __cb(_, __frame, 6, 6, function __$Neo4j_prototype_save__4() {
                        node.data.id = node.id;
                        return _(null, node.data); }, true)); }, true)); }, true)); }); };


        Neo4j.prototype.exists = function Neo4j_prototype_exists__5(model, id, _) { var __this = this; var __frame = { name: "Neo4j_prototype_exists__5", line: 224 }; return __func(_, this, arguments, Neo4j_prototype_exists__5, 2, __frame, function __$Neo4j_prototype_exists__5() {
            delete __this.cache[id];
            return __this.node(id, __cb(_, __frame, 2, 13, _, true)); }); };


        Neo4j.prototype.find = function Neo4j_prototype_find__6(model, id, _) { var node, __this = this; var __frame = { name: "Neo4j_prototype_find__6", line: 229 }; return __func(_, this, arguments, Neo4j_prototype_find__6, 2, __frame, function __$Neo4j_prototype_find__6() {

            delete __this.cache[id];
            return __this.node(id, __cb(_, __frame, 3, 13, function ___(__0, __1) { node = __1;
                if ((node && node.data)) {
                    node.data.id = id; } ;

                return _(null, __this.readFromDb(model, (node && node.data))); }, true)); }); };


        Neo4j.prototype.readFromDb = function(model, data) {
            var props, res;
            if (!data) {
                return data; } ;

            res = { };
            props = this._models[model].properties;
            Object.keys(data).forEach(function(key) {
                return res[key] = ((props[key] && (props[key].type.name === "Date")) ? new Date(data[key]) : data[key]); });

            return res; };


        Neo4j.prototype.destroy = function Neo4j_prototype_destroy__7(model, id, _) { var node, __this = this; var __frame = { name: "Neo4j_prototype_destroy__7", line: 252 }; return __func(_, this, arguments, Neo4j_prototype_destroy__7, 2, __frame, function __$Neo4j_prototype_destroy__7() {

            return __this.node(id, __cb(_, __frame, 2, 13, function ___(__0, __1) { node = __1;
                return node["delete"](__cb(_, __frame, 3, 6, function __$Neo4j_prototype_destroy__7() {
                    return _(null, delete __this.cache[id]); }, true), true); }, true)); }); };


        Neo4j.prototype.all = function Neo4j_prototype_all__8(model, filter, _) { var dir, key, nodes, _this, __this = this; var __frame = { name: "Neo4j_prototype_all__8", line: 259 }; return __func(_, this, arguments, Neo4j_prototype_all__8, 2, __frame, function __$Neo4j_prototype_all__8() { _this = __this;


            return __this.client.queryNodeIndex(model, "id:*", __cb(_, __frame, 3, 14, function ___(__0, __2) { return __2.map_(__cb(_, __frame, 3, 14, function ___(__0, __3) { nodes = __3;



                if (filter) {
                    nodes.filter(applyFilter(filter)); } ;

                if (filter.order) {
                    key = filter.order.split(" ")[0];
                    dir = filter.order.split(" ")[1];
                    nodes = nodes.sort(function(a, b) {
                        return (a[key] > b[key]); });

                    if ((dir === "DESC")) {
                        nodes = nodes.reverse(); } ; } ;


                return _(null, nodes); }, true), function __1(_, obj) { var __frame = { name: "__1", line: 262 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { obj.data.id = obj.id; return _(null, _this.readFromDb(model, obj.data)); }); }); }, true)); }); };


        Neo4j.prototype.allNodes = function Neo4j_prototype_allNodes__9(model, _) { var __this = this; var __frame = { name: "Neo4j_prototype_allNodes__9", line: 282 }; return __func(_, this, arguments, Neo4j_prototype_allNodes__9, 1, __frame, function __$Neo4j_prototype_allNodes__9() {
            return __this.client.queryNodeIndex(model, "id:*", __cb(_, __frame, 1, 13, _, true)); }); };


        Neo4j.prototype.destroyAll = function Neo4j_prototype_destroyAll__10(model, _) { var __this = this; var __frame = { name: "Neo4j_prototype_destroyAll__10", line: 286 }; return __func(_, this, arguments, Neo4j_prototype_destroyAll__10, 1, __frame, function __$Neo4j_prototype_destroyAll__10() {
            return __this.allNodes(model, __cb(_, __frame, 1, 13, function ___(__0, __3) { return __3.forEach_(__cb(_, __frame, 1, 13, _, true), function __1(_, node) { var __frame = { name: "__1", line: 287 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                return node["delete"](__cb(_, __frame, 1, 15, _, true), true); }); }); }, true)); }); };



        Neo4j.prototype.count = function Neo4j_prototype_count__11(model, _, conds) { var collection, __this = this; var __frame = { name: "Neo4j_prototype_count__11", line: 292 }; return __func(_, this, arguments, Neo4j_prototype_count__11, 1, __frame, function __$Neo4j_prototype_count__11() {

            return __this.all(model, {
                where: conds }, __cb(_, __frame, 2, 19, function ___(__0, __1) { collection = __1;

                if (collection.length) {
                    return _(null, collection.length); } ;

                return _(null, 0); }, true)); }); };


        Neo4j.prototype.updateAttributes = function Neo4j_prototype_updateAttributes__12(model, id, data, _) { var node, __this = this; var __frame = { name: "Neo4j_prototype_updateAttributes__12", line: 303 }; return __func(_, this, arguments, Neo4j_prototype_updateAttributes__12, 3, __frame, function __$Neo4j_prototype_updateAttributes__12() {

            data.id = id;
            return __this.node(id, __cb(_, __frame, 3, 13, function ___(__0, __1) { node = __1;
                return __this.save(model, merge(node.data, data), __cb(_, __frame, 4, 13, _, true)); }, true)); }); };


        cleanup = function(data) {
            var res;
            if (!data) {
                return null; } ;

            res = { };
            Object.keys(data).forEach(function(key) {
                var v;
                v = data[key];
                if ((((v !== null) && !(((v.constructor.name === "Array") && (v.length === 0)))) && (typeof v !== "undefined"))) {
                    return res[key] = v; } ; });


            return res; };


        merge = function(base, update) {
            Object.keys(update).forEach(function(key) {
                return base[key] = update[key]; });

            return base; };


        applyFilter = function(filter) {
            var keys, test;
            test = function(example, value) {
                if ((((typeof value === "string") && example) && (example.constructor.name === "RegExp"))) {
                    return value.match(example); } ;

                if (((((typeof value === "object") && (value.constructor.name === "Date")) && (typeof example === "object")) && (example.constructor.name === "Date"))) {
                    return (example.toString() === value.toString()); } ;

                return (example === value); };

            if ((typeof filter.where === "function")) {
                return filter.where; } ;

            keys = Object.keys((filter.where || { }));
            return function(obj) {
                var pass;
                pass = true;
                return keys.forEach(function(key) {
                    if (!test(filter.where[key], obj[key])) {
                        return pass = false; } ; }); }; };





        return Neo4j;

    }).call(this);

}).call(this);